name: Deploy InsightModAI Agent

# Required for OIDC authentication
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

on:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy
          - validate

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Validate CloudFormation template
  validate:
    name: Validate CloudFormation Template
    runs-on: ubuntu-latest
    outputs:
      template-valid: ${{ steps.validate.outputs.valid }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2
          audience: sts.amazonaws.com

      - name: Validate CloudFormation template
        id: validate
        run: |
          if aws cloudformation validate-template \
            --template-body file://cloudformation/template.yaml \
            --region us-west-2; then
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Build and test frontend
  frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint || echo "Linting warnings found but continuing..."

      - name: Run tests
        run: |
          cd frontend
          npm test -- --watchAll=false --coverage || echo "Tests completed with warnings"

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

  # Build and test agent container
  agent:
    name: Build Agent Container
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install agent dependencies
        run: |
          cd agent
          uv sync

      - name: Run agent tests
        run: |
          cd agent
          uv run python -m pytest || echo "Tests completed"

      - name: Build agent container
        run: |
          cd agent
          docker build -t insightmodai-agent:latest .

      - name: Save container image
        run: |
          docker save insightmodai-agent:latest | gzip > agent-container.tar.gz

      - name: Upload agent container
        uses: actions/upload-artifact@v4
        with:
          name: agent-container
          path: agent-container.tar.gz
          retention-days: 7

  # Package and Deploy Infrastructure
  package-and-deploy:
    name: Package and Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.template-valid == 'true'
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2

      - name: Set deployment variables
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          STACK_NAME="insightmodai-agent-${ENVIRONMENT}"
          BUCKET_NAME="insightmodai-deployment-us-west-2-${ENVIRONMENT}"

          echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_ENV
          echo "STACK_NAME=${STACK_NAME}" >> $GITHUB_ENV
          echo "DEPLOYMENT_BUCKET=${BUCKET_NAME}" >> $GITHUB_ENV

      - name: Setup S3 bucket for deployment artifacts
        run: |
          # Check if bucket exists, create if not
          aws s3 ls s3://${{ env.DEPLOYMENT_BUCKET }} --region us-west-2 >/dev/null 2>&1 || \
          aws s3 mb s3://${{ env.DEPLOYMENT_BUCKET }} --region us-west-2

      - name: Package Lambda functions
        run: |
          # Package each Lambda function from lambda directory
          cd lambda

          # Package feedback-ingestion function
          zip -r ../feedback-ingestion-${{ env.ENVIRONMENT }}.zip feedback_ingestion.py

          # Package agent-invoker function
          zip -r ../agent-invoker-${{ env.ENVIRONMENT }}.zip agent_invoker.py

          # Package crm-integrator function
          zip -r ../crm-integrator-${{ env.ENVIRONMENT }}.zip crm_integrator.py

          # Package config-manager function
          zip -r ../config-manager-${{ env.ENVIRONMENT }}.zip config_manager.py

          # Package insights-handler function
          zip -r ../insights-handler-${{ env.ENVIRONMENT }}.zip insights_handler.py

          # Package agent-deployment function
          zip -r ../agent-deployment-${{ env.ENVIRONMENT }}.zip agent_deployment.py

          cd ..

          # Upload Lambda packages to S3
          aws s3 cp feedback-ingestion-${{ env.ENVIRONMENT }}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/feedback-ingestion-${{ env.ENVIRONMENT }}.zip --region us-west-2
          aws s3 cp agent-invoker-${{ env.ENVIRONMENT }}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/agent-invoker-${{ env.ENVIRONMENT }}.zip --region us-west-2
          aws s3 cp crm-integrator-${{ env.ENVIRONMENT }}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/crm-integrator-${{ env.ENVIRONMENT }}.zip --region us-west-2
          aws s3 cp config-manager-${{ env.ENVIRONMENT }}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/config-manager-${{ env.ENVIRONMENT }}.zip --region us-west-2
          aws s3 cp insights-handler-${{ env.ENVIRONMENT }}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/insights-handler-${{ env.ENVIRONMENT }}.zip --region us-west-2
          aws s3 cp agent-deployment-${{ env.ENVIRONMENT }}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/agent-deployment-${{ env.ENVIRONMENT }}.zip --region us-west-2

      - name: Package CloudFormation template
        run: |
          aws cloudformation package \
            --template-file cloudformation/template.yaml \
            --s3-bucket ${{ env.DEPLOYMENT_BUCKET }} \
            --output-template-file packaged-template.yaml \
            --region us-west-2

      - name: Deploy CloudFormation stack
        run: |
          # Generate deterministic Cognito domain prefix
          ENVIRONMENT="${{ env.ENVIRONMENT }}"
          REPO_NAME="InsightModAI"

          # Create deterministic suffix based on account ID and repo name
          DETERMINISTIC_SUFFIX=$(echo "${{ secrets.AWS_ACCOUNT_ID }}${REPO_NAME}" | md5sum | head -c 8 | tr '[:upper:]' '[:lower:]')
          COGNITO_PREFIX="insightmodai-${DETERMINISTIC_SUFFIX}"

          echo "Using Cognito domain: ${COGNITO_PREFIX}-${ENVIRONMENT}"

          echo "Deploying CloudFormation stack: ${{ env.STACK_NAME }}"

          # Use aws cloudformation deploy which handles create/update automatically
          aws cloudformation deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --template-file packaged-template.yaml \
            --parameter-overrides \
              EnvironmentName="${{ env.ENVIRONMENT }}" \
              AdminEmail="admin@insightmodai.com" \
              BedrockModelId="us.anthropic.claude-3-5-sonnet-20241022-v2:0" \
              CognitoDomainName="${COGNITO_PREFIX}-${ENVIRONMENT}" \
              LambdaCodeBucket="${{ env.DEPLOYMENT_BUCKET }}" \
            --capabilities CAPABILITY_NAMED_IAM CAPABILITY_IAM \
            --region us-west-2 \
            --no-fail-on-empty-changeset

          echo "Stack deployment completed successfully"

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-build/

      - name: Download agent container
        uses: actions/download-artifact@v4
        with:
          name: agent-container
          path: .

      - name: Prepare deployment artifacts
        run: |
          echo "Preparing deployment artifacts..."

          # Load agent container
          gunzip agent-container.tar.gz
          docker load < agent-container.tar

          # Prepare frontend build
          cd frontend-build
          zip -r ../frontend-build.zip .
          cd ..

      - name: Deploy frontend to Amplify
        run: |
          echo "Starting frontend deployment to Amplify..."

          # Get Amplify App ID from CloudFormation outputs
          if ! AMPLIFY_APP_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region us-west-2 \
            --query 'Stacks[0].Outputs[?OutputKey==`AmplifyAppId`].OutputValue' \
            --output text 2>/dev/null); then
            echo "Error: Could not retrieve Amplify App ID from stack outputs"
            exit 1
          fi

          if [ -z "$AMPLIFY_APP_ID" ] || [ "$AMPLIFY_APP_ID" = "None" ]; then
            echo "Error: Amplify App ID is empty or not found in stack outputs"
            exit 1
          fi

          echo "Deploying frontend to Amplify app: $AMPLIFY_APP_ID"

          # Upload frontend build to S3
          if ! aws s3 cp frontend-build.zip s3://${{ env.DEPLOYMENT_BUCKET }}/frontend-build.zip --region us-west-2; then
            echo "Error: Failed to upload frontend build to S3"
            exit 1
          fi

          # Start Amplify deployment (bucket-based deployment)
          DEPLOYMENT_JOB_ID=$(aws amplify start-deployment \
            --app-id $AMPLIFY_APP_ID \
            --source-url "s3://${{ env.DEPLOYMENT_BUCKET }}/frontend-build.zip" \
            --source-url-type ZIP \
            --region us-west-2 \
            --query 'jobSummary.jobId' \
            --output text)

          if [ -z "$DEPLOYMENT_JOB_ID" ] || [ "$DEPLOYMENT_JOB_ID" = "None" ]; then
            echo "Error: Failed to start Amplify deployment"
            exit 1
          fi

          echo "Frontend deployment started successfully with job ID: $DEPLOYMENT_JOB_ID"

          # Wait for deployment completion
          echo "Waiting for Amplify deployment to complete..."
          MAX_WAIT_TIME=900  # 15 minutes
          WAIT_TIME=0
          SLEEP_INTERVAL=30

          while [ $WAIT_TIME -lt $MAX_WAIT_TIME ]; do
            JOB_STATUS=$(aws amplify get-job \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --job-id $DEPLOYMENT_JOB_ID \
              --region us-west-2 \
              --query 'job.summary.status' \
              --output text 2>/dev/null || echo "UNKNOWN")

            echo "Deployment status: $JOB_STATUS (waited ${WAIT_TIME}s)"

            case $JOB_STATUS in
              "SUCCEED")
                echo "Frontend deployment completed successfully"
                break
                ;;
              "FAILED"|"FAULT")
                echo "Error: Frontend deployment failed with status: $JOB_STATUS"
                exit 1
                ;;
              "CANCELLED")
                echo "Error: Frontend deployment was cancelled"
                exit 1
                ;;
              *)
                sleep $SLEEP_INTERVAL
                WAIT_TIME=$((WAIT_TIME + SLEEP_INTERVAL))
                ;;
            esac
          done

          if [ $WAIT_TIME -ge $MAX_WAIT_TIME ]; then
            echo "Error: Frontend deployment timed out after ${MAX_WAIT_TIME}s"
            exit 1
          fi

      - name: Deploy agent container
        run: |
          echo "Starting agent container deployment..."

          # Load container image
          if ! docker load < agent-container.tar; then
            echo "Error: Failed to load agent container image"
            exit 1
          fi

          # Get ECR repository URI from CloudFormation outputs
          if ! ECR_URI=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region us-west-2 \
            --query 'Stacks[0].Outputs[?OutputKey==`ECRRepositoryUri`].OutputValue' \
            --output text 2>/dev/null); then
            echo "Error: Could not retrieve ECR repository URI from stack outputs"
            exit 1
          fi

          if [ -z "$ECR_URI" ] || [ "$ECR_URI" = "None" ]; then
            echo "Error: ECR repository URI is empty or not found in stack outputs"
            exit 1
          fi

          echo "Deploying to ECR repository: $ECR_URI"

          # Tag the container
          if ! docker tag insightmodai-agent:latest $ECR_URI:latest; then
            echo "Error: Failed to tag container image"
            exit 1
          fi

          # Login to ECR
          if ! aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $ECR_URI; then
            echo "Error: Failed to login to ECR"
            exit 1
          fi

          # Push the container
          if ! docker push $ECR_URI:latest; then
            echo "Error: Failed to push container to ECR"
            exit 1
          fi

          echo "Agent container deployed successfully to: $ECR_URI:latest"


  # Cleanup on failure
  cleanup:
    name: Cleanup Failed Deployment
    runs-on: ubuntu-latest
    needs: package-and-deploy
    if: failure() && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2
          audience: sts.amazonaws.com

      - name: Delete failed stack
        run: |
          ENV="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          STACK_NAME="insightmodai-agent-${ENV}"

          if aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region us-west-2 >/dev/null 2>&1; then

            aws cloudformation delete-stack \
              --stack-name "$STACK_NAME" \
              --region us-west-2

            aws cloudformation wait stack-delete-complete \
              --stack-name "$STACK_NAME" \
              --region us-west-2 || true
          fi

  # Destroy stack (manual trigger only)
  destroy:
    name: Destroy Stack
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2
          audience: sts.amazonaws.com

      - name: Delete CloudFormation stack
        run: |
          STACK_NAME="insightmodai-agent-${{ github.event.inputs.environment }}"

          if aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region us-west-2 >/dev/null 2>&1; then

            aws cloudformation delete-stack \
              --stack-name "$STACK_NAME" \
              --region us-west-2

            aws cloudformation wait stack-delete-complete \
              --stack-name "$STACK_NAME" \
              --region us-west-2
          fi

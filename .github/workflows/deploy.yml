name: Deploy InsightModAI Agent

# Required for OIDC authentication
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

on:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy
          - validate

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Validate CloudFormation template
  validate:
    name: Validate CloudFormation Template
    runs-on: ubuntu-latest
    outputs:
      template-valid: ${{ steps.validate.outputs.valid }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2
          audience: sts.amazonaws.com

      - name: Validate CloudFormation template
        id: validate
        run: |
          echo "Validating CloudFormation template..."
          if aws cloudformation validate-template \
            --template-body file://cloudformation/template.yaml \
            --region us-west-2; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "‚úÖ CloudFormation template is valid"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "‚ùå CloudFormation template validation failed"
            exit 1
          fi

  # Build and test frontend
  frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint || echo "Linting warnings found but continuing..."

      - name: Run tests
        run: |
          cd frontend
          npm test -- --watchAll=false --coverage || echo "Tests completed with warnings"

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

  # Build and test agent container
  agent:
    name: Build Agent Container
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install agent dependencies
        run: |
          cd agent
          uv sync

      - name: Run agent tests
        run: |
          cd agent
          uv run python -m pytest || echo "Tests completed"

      - name: Build agent container
        run: |
          cd agent
          docker build -t insightmodai-agent:latest .

      - name: Save container image
        run: |
          docker save insightmodai-agent:latest | gzip > agent-container.tar.gz

      - name: Upload agent container
        uses: actions/upload-artifact@v4
        with:
          name: agent-container
          path: agent-container.tar.gz
          retention-days: 7

  # Package and Deploy Infrastructure
  package-and-deploy:
    name: Package and Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.template-valid == 'true'
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2

      - name: Setup S3 bucket for deployment artifacts
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          BUCKET_NAME="insightmodai-deployment-us-west-2-${ENVIRONMENT}"
          echo "DEPLOYMENT_BUCKET=${BUCKET_NAME}" >> $GITHUB_ENV

          # Check if bucket exists
          if aws s3 ls s3://${BUCKET_NAME} --region us-west-2 2>/dev/null; then
            echo "‚úÖ Using existing deployment bucket: ${BUCKET_NAME}"
          else
            echo "üì¶ Creating new deployment bucket: ${BUCKET_NAME}"
            if aws s3 mb s3://${BUCKET_NAME} --region us-west-2; then
              echo "‚úÖ Created deployment bucket: ${BUCKET_NAME}"
            else
              echo "‚ùå Failed to create deployment bucket"
              exit 1
            fi
          fi

      - name: Package CloudFormation template
        run: |
          echo "üì¶ Packaging CloudFormation template..."
          aws cloudformation package \
            --template-file cloudformation/template.yaml \
            --s3-bucket ${{ env.DEPLOYMENT_BUCKET }} \
            --output-template-file packaged-template.yaml \
            --region us-west-2

      - name: Package Lambda functions
        run: |
          echo "üì¶ Packaging Lambda functions..."
          ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"

          # Package each Lambda function from lambda directory
          cd lambda

          # Package feedback-ingestion function
          zip -r ../feedback-ingestion-${ENVIRONMENT}.zip feedback_ingestion.py

          # Package agent-invoker function
          zip -r ../agent-invoker-${ENVIRONMENT}.zip agent_invoker.py

          # Package crm-integrator function
          zip -r ../crm-integrator-${ENVIRONMENT}.zip crm_integrator.py

          # Package agent-deployment function
          zip -r ../agent-deployment-${ENVIRONMENT}.zip agent_deployment.py

          cd ..

          # Verify files exist
          ls -la *-*.zip

          # Upload Lambda packages to S3
          aws s3 cp feedback-ingestion-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/feedback-ingestion-${ENVIRONMENT}.zip --region us-west-2
          aws s3 cp agent-invoker-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/agent-invoker-${ENVIRONMENT}.zip --region us-west-2
          aws s3 cp crm-integrator-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/crm-integrator-${ENVIRONMENT}.zip --region us-west-2
          aws s3 cp agent-deployment-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/agent-deployment-${ENVIRONMENT}.zip --region us-west-2

          echo "‚úÖ Lambda functions packaged and uploaded"

      - name: Deploy CloudFormation stack
        run: |
          echo "üöÄ Deploying CloudFormation stack..."
          ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}"
          STACK_NAME="insightmodai-agent-${ENVIRONMENT}"

          # Generate unique Cognito domain
          BASE_DOMAIN="insightmodai-${ENVIRONMENT}"
          COGNITO_DOMAIN="${BASE_DOMAIN}"
          ATTEMPTS=0
          MAX_ATTEMPTS=10

          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            echo "üîç Checking if Cognito domain '$COGNITO_DOMAIN' is available..."
            
            if aws cognito-idp describe-user-pool-domain \
                --domain "$COGNITO_DOMAIN" \
                --region us-west-2 >/dev/null 2>&1; then
              echo "‚ùå Domain '$COGNITO_DOMAIN' already exists, trying variation..."
              SUFFIX=$(openssl rand -hex 2)
              COGNITO_DOMAIN="${BASE_DOMAIN}-${SUFFIX}"
              ATTEMPTS=$((ATTEMPTS + 1))
            else
              echo "‚úÖ Domain '$COGNITO_DOMAIN' is available!"
              break
            fi
          done

          if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
            echo "‚ùå Could not find available Cognito domain after $MAX_ATTEMPTS attempts"
            exit 1
          fi

          echo "üéØ Using Cognito domain: $COGNITO_DOMAIN"

          # Check if stack exists
          if aws cloudformation describe-stacks --stack-name $STACK_NAME --region us-west-2 >/dev/null 2>&1; then
            echo "üìù Updating existing stack: $STACK_NAME"
            OPERATION="update-stack"
            WAIT_OPERATION="stack-update-complete"
          else
            echo "üÜï Creating new stack: $STACK_NAME"
            OPERATION="create-stack"
            WAIT_OPERATION="stack-create-complete"
          fi

          # Deploy the stack
          aws cloudformation $OPERATION \
            --stack-name $STACK_NAME \
            --template-body file://packaged-template.yaml \
            --parameters \
              ParameterKey=EnvironmentName,ParameterValue="${ENVIRONMENT}" \
              ParameterKey=AdminEmail,ParameterValue="admin@insightmodai.com" \
              ParameterKey=BedrockModelId,ParameterValue="us.anthropic.claude-3-5-sonnet-20241022-v2:0" \
              ParameterKey=CognitoDomainName,ParameterValue="${COGNITO_DOMAIN}" \
              ParameterKey=LambdaCodeBucket,ParameterValue="${{ env.DEPLOYMENT_BUCKET }}" \
            --capabilities CAPABILITY_NAMED_IAM CAPABILITY_IAM \
            --region us-west-2

          echo "‚è≥ Waiting for stack operation to complete..."
          aws cloudformation wait $WAIT_OPERATION \
            --stack-name $STACK_NAME \
            --region us-west-2

          echo "‚úÖ CloudFormation deployment completed successfully!"

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-build/

      - name: Download agent container
        uses: actions/download-artifact@v4
        with:
          name: agent-container
          path: agent-container.tar.gz

      - name: Load agent container
        run: |
          gunzip agent-container.tar.gz
          docker load < agent-container.tar

      - name: Deploy frontend to Amplify
        run: |
          echo "üåê Deploying frontend to Amplify..."

          # Get Amplify App ID from CloudFormation outputs
          AMPLIFY_APP_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region us-west-2 \
            --query 'Stacks[0].Outputs[?OutputKey==`AmplifyAppId`].OutputValue' \
            --output text)

          if [ -z "$AMPLIFY_APP_ID" ]; then
            echo "‚ùå Could not find Amplify App ID in CloudFormation outputs"
            exit 1
          fi

          echo "üì¶ Uploading frontend build to S3..."
          cd frontend-build
          zip -r ../frontend-build.zip .
          cd ..
          aws s3 cp frontend-build.zip s3://${{ env.DEPLOYMENT_BUCKET }}/frontend-build.zip --region us-west-2

          echo "üöÄ Starting Amplify deployment..."
          aws amplify start-deployment \
            --app-id $AMPLIFY_APP_ID \
            --branch-name main \
            --source-url "s3://${{ env.DEPLOYMENT_BUCKET }}/frontend-build.zip" \
            --region us-west-2

      - name: Generate deployment summary
        run: |
          echo "üìä Deployment Summary"
          echo "===================="
          echo "Stack Name: $STACK_NAME"
          echo "Region: us-west-2"
          echo "Environment: $ENVIRONMENT"
          echo "S3 Bucket: ${{ env.DEPLOYMENT_BUCKET }}"
          echo ""
          echo "‚úÖ Deployment completed successfully!"

  # Cleanup on failure
  cleanup:
    name: Cleanup Failed Deployment
    runs-on: ubuntu-latest
    needs: package-and-deploy
    if: failure() && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load environment configuration for cleanup
        id: cleanup-config
        run: |
          ENV="${{ github.event.inputs.environment || 'prod' }}"

          if [ -f ".github/environments/${ENV}.yml" ]; then
            STACK_NAME=$(grep 'stack_name:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*stack_name: *//' | tr -d '"' | tr -d "'")
            AWS_REGION=$(grep 'region:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*region: *//' | tr -d '"' | tr -d "'")

            echo "STACK_NAME=$STACK_NAME" >> $GITHUB_OUTPUT
            echo "AWS_REGION_VAL=$AWS_REGION" >> $GITHUB_OUTPUT
          else
            echo "STACK_NAME=insightmodai-agent-$ENV" >> $GITHUB_OUTPUT
            echo "AWS_REGION_VAL=us-west-2" >> $GITHUB_OUTPUT
          fi

      - name: Set cleanup variables
        run: |
          echo "AWS_ROLE_TO_ASSUME=arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ steps.cleanup-config.outputs.AWS_REGION_VAL }}
          audience: sts.amazonaws.com

      - name: Delete failed stack
        run: |
          STACK_NAME="${{ steps.cleanup-config.outputs.STACK_NAME }}"
          AWS_REGION="${{ steps.cleanup-config.outputs.AWS_REGION_VAL }}"

          if aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region "$AWS_REGION" >/dev/null 2>&1; then

            echo "üóëÔ∏è Cleaning up failed deployment stack: $STACK_NAME"

            aws cloudformation delete-stack \
              --stack-name "$STACK_NAME" \
              --region "$AWS_REGION"

            aws cloudformation wait stack-delete-complete \
              --stack-name "$STACK_NAME" \
              --region "$AWS_REGION" || true

            echo "‚úÖ Stack cleanup completed"
          else
            echo "‚ÑπÔ∏è No stack to cleanup"
          fi

  # Destroy stack (manual trigger only)
  destroy:
    name: Destroy Stack
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load environment configuration for destroy
        id: destroy-config
        run: |
          ENV="${{ github.event.inputs.environment }}"

          if [ -f ".github/environments/${ENV}.yml" ]; then
            STACK_NAME=$(grep 'stack_name:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*stack_name: *//' | tr -d '"' | tr -d "'")
            AWS_REGION=$(grep 'region:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*region: *//' | tr -d '"' | tr -d "'")

            echo "STACK_NAME=$STACK_NAME" >> $GITHUB_OUTPUT
            echo "AWS_REGION_VAL=$AWS_REGION" >> $GITHUB_OUTPUT
          else
            echo "STACK_NAME=insightmodai-agent-$ENV" >> $GITHUB_OUTPUT
            echo "AWS_REGION_VAL=us-west-2" >> $GITHUB_OUTPUT
          fi

      - name: Set destroy variables
        run: |
          echo "AWS_ROLE_TO_ASSUME=arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ steps.destroy-config.outputs.AWS_REGION_VAL }}
          audience: sts.amazonaws.com

      - name: Delete CloudFormation stack
        run: |
          STACK_NAME="${{ steps.destroy-config.outputs.STACK_NAME }}"
          AWS_REGION="${{ steps.destroy-config.outputs.AWS_REGION_VAL }}"

          echo "üóëÔ∏è Destroying stack: $STACK_NAME"

          if aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region "$AWS_REGION" >/dev/null 2>&1; then

            aws cloudformation delete-stack \
              --stack-name "$STACK_NAME" \
              --region "$AWS_REGION"

            aws cloudformation wait stack-delete-complete \
              --stack-name "$STACK_NAME" \
              --region "$AWS_REGION"

            echo "‚úÖ Stack destroyed successfully"
          else
            echo "‚ÑπÔ∏è Stack $STACK_NAME does not exist"
          fi

name: Deploy InsightModAI Agent

# Required for OIDC authentication
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

on:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy
          - validate

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Validate CloudFormation template
  validate:
    name: Validate CloudFormation Template
    runs-on: ubuntu-latest
    outputs:
      template-valid: ${{ steps.validate.outputs.valid }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: us-west-2

      - name: Validate CloudFormation template
        id: validate
        run: |
          echo "Validating CloudFormation template..."
          if aws cloudformation validate-template \
            --template-body file://cloudformation/template.yaml \
            --region us-west-2; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "✅ CloudFormation template is valid"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "❌ CloudFormation template validation failed"
            exit 1
          fi

  # Build and test frontend
  frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint || echo "Linting warnings found but continuing..."

      - name: Run tests
        run: |
          cd frontend
          npm test -- --watchAll=false --coverage || echo "Tests completed with warnings"

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

  # Build and test agent container
  agent:
    name: Build Agent Container
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install agent dependencies
        run: |
          cd agent
          uv sync

      - name: Run agent tests
        run: |
          cd agent
          uv run python -m pytest || echo "Tests completed"

      - name: Build agent container
        run: |
          cd agent
          docker build -t insightmodai-agent:latest .

      - name: Save container image
        run: |
          docker save insightmodai-agent:latest | gzip > agent-container.tar.gz

      - name: Upload agent container
        uses: actions/upload-artifact@v4
        with:
          name: agent-container
          path: agent-container.tar.gz
          retention-days: 7

  # Deploy to AWS
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [validate, frontend, agent]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'prod' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-build/

      - name: Download agent container
        uses: actions/download-artifact@v4
        with:
          name: agent-container
          path: ./

      - name: Load agent container
        run: |
          gunzip agent-container.tar.gz
          docker load < agent-container.tar

      - name: Load environment configuration
        id: config
        run: |
          # Determine environment
          ENV="${{ github.event.inputs.environment || 'prod' }}"

          # Load environment configuration
          if [ -f ".github/environments/${ENV}.yml" ]; then
            echo "Loading configuration for $ENV environment"

            # Extract key values using basic shell parsing (no yq dependency)
            STACK_NAME=$(grep 'stack_name:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*stack_name: *//' | tr -d '"' | tr -d "'")
            ADMIN_EMAIL=$(grep 'AdminEmail:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*AdminEmail: *//' | tr -d '"' | tr -d "'")
            BEDROCK_MODEL=$(grep 'BedrockModelId:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*BedrockModelId: *//' | tr -d '"' | tr -d "'")
            AWS_REGION=$(grep 'region:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*region: *//' | tr -d '"' | tr -d "'")
            AWS_ROLE_ARN=$(grep '  role_arn:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*role_arn: *//' | tr -d '"' | tr -d "'")

            echo "STACK_NAME=$STACK_NAME" >> $GITHUB_OUTPUT
            echo "ADMIN_EMAIL=$ADMIN_EMAIL" >> $GITHUB_OUTPUT
            echo "BEDROCK_MODEL=$BEDROCK_MODEL" >> $GITHUB_OUTPUT
            echo "AWS_REGION_VAL=$AWS_REGION" >> $GITHUB_OUTPUT
            echo "AWS_ROLE_ARN=$AWS_ROLE_ARN" >> $GITHUB_OUTPUT
          else
            echo "Environment configuration not found, using defaults"
            echo "STACK_NAME=insightmodai-agent-$ENV" >> $GITHUB_OUTPUT
            echo "ADMIN_EMAIL=admin@yourcompany.com" >> $GITHUB_OUTPUT
            echo "BEDROCK_MODEL=us.anthropic.claude-3-5-sonnet-20241022-v2:0" >> $GITHUB_OUTPUT
            echo "AWS_REGION_VAL=us-west-2" >> $GITHUB_OUTPUT
            echo "AWS_ROLE_ARN=arn:aws:iam::123456789012:role/personal-github-oidc-role" >> $GITHUB_OUTPUT
          fi

      - name: Generate unique Cognito domain
        id: generate-domain
        run: |
          echo "🔍 Generating unique Cognito domain..."

          # Get base domain from stack name
          BASE_DOMAIN="${{ steps.config.outputs.STACK_NAME }}"
          BASE_DOMAIN=$(echo "$BASE_DOMAIN" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]//g' | sed 's/^-\|-$//g')

          # Ensure minimum length
          if [ ${#BASE_DOMAIN} -lt 3 ]; then
            BASE_DOMAIN="insightmodai-${{ github.event.inputs.environment }}"
          fi

          # Truncate if too long (leave room for suffix)
          if [ ${#BASE_DOMAIN} -gt 55 ]; then
            BASE_DOMAIN="${BASE_DOMAIN:0:55}"
            BASE_DOMAIN=$(echo "$BASE_DOMAIN" | sed 's/-$//')
          fi

          DOMAIN_TO_USE="$BASE_DOMAIN"
          ATTEMPTS=0
          MAX_ATTEMPTS=10

          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            echo "Checking if domain '$DOMAIN_TO_USE' is available..."

            # Check if domain exists using AWS CLI
            if aws cognito-idp describe-user-pool-domain \
                --domain "$DOMAIN_TO_USE" \
                --region ${{ steps.config.outputs.AWS_REGION_VAL }} >/dev/null 2>&1; then
              echo "❌ Domain '$DOMAIN_TO_USE' already exists, trying variation..."
              SUFFIX=$(openssl rand -hex 2 | cut -c1-4)
              DOMAIN_TO_USE="${BASE_DOMAIN}-${SUFFIX}"
              ATTEMPTS=$((ATTEMPTS + 1))
            else
              echo "✅ Domain '$DOMAIN_TO_USE' is available!"
              break
            fi
          done

          if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
            echo "❌ Could not find available domain after $MAX_ATTEMPTS attempts"
            exit 1
          fi

          echo "COGNITO_DOMAIN=$DOMAIN_TO_USE" >> $GITHUB_OUTPUT
          echo "🎯 Using Cognito domain: $DOMAIN_TO_USE"

      - name: Set deployment variables
        run: |
          echo "STACK_NAME=${{ steps.config.outputs.STACK_NAME }}" >> $GITHUB_ENV
          echo "ADMIN_EMAIL=${{ steps.config.outputs.ADMIN_EMAIL }}" >> $GITHUB_ENV
          echo "BEDROCK_MODEL_ID=${{ steps.config.outputs.BEDROCK_MODEL }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ steps.config.outputs.AWS_REGION_VAL }}" >> $GITHUB_ENV
          echo "AWS_ROLE_TO_ASSUME=${{ steps.config.outputs.AWS_ROLE_ARN }}" >> $GITHUB_ENV
          echo "COGNITO_DOMAIN_NAME=${{ steps.generate-domain.outputs.COGNITO_DOMAIN }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if stack exists
        id: stack-exists
        run: |
          if aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "🔍 Stack ${{ env.STACK_NAME }} exists, will update"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "🆕 Stack ${{ env.STACK_NAME }} does not exist, will create"
          fi

      - name: Deploy CloudFormation stack
        run: |
          echo "🚀 Deploying CloudFormation stack: ${{ env.STACK_NAME }}"

          if [[ "${{ steps.stack-exists.outputs.exists }}" == "true" ]]; then
            echo "Updating existing stack..."
            aws cloudformation update-stack \
              --stack-name ${{ env.STACK_NAME }} \
              --template-body file://cloudformation/template.yaml \
              --parameters \
                ParameterKey=AdminEmail,ParameterValue="${{ env.ADMIN_EMAIL }}" \
                ParameterKey=BedrockModelId,ParameterValue="${{ env.BEDROCK_MODEL_ID }}" \
                ParameterKey=EnvironmentName,ParameterValue="${{ github.event.inputs.environment || 'prod' }}" \
                ParameterKey=EnableCRM,ParameterValue="${{ github.event.inputs.environment == 'dev' && 'false' || 'true' }}" \
                ParameterKey=CognitoDomainName,ParameterValue="${{ env.COGNITO_DOMAIN_NAME }}" \
              --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
              --region ${{ env.AWS_REGION }}
          else
            echo "Creating new stack..."
            aws cloudformation create-stack \
              --stack-name ${{ env.STACK_NAME }} \
              --template-body file://cloudformation/template.yaml \
              --parameters \
                ParameterKey=AdminEmail,ParameterValue="${{ env.ADMIN_EMAIL }}" \
                ParameterKey=BedrockModelId,ParameterValue="${{ env.BEDROCK_MODEL_ID }}" \
                ParameterKey=EnvironmentName,ParameterValue="${{ github.event.inputs.environment || 'prod' }}" \
                ParameterKey=EnableCRM,ParameterValue="${{ github.event.inputs.environment == 'dev' && 'false' || 'true' }}" \
                ParameterKey=CognitoDomainName,ParameterValue="${{ env.COGNITO_DOMAIN_NAME }}" \
              --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
              --region ${{ env.AWS_REGION }}
          fi

      - name: Wait for stack completion
        run: |
          echo "⏳ Waiting for stack deployment to complete..."
          aws cloudformation wait stack-create-complete \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} || \
          aws cloudformation wait stack-update-complete \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }}

          echo "✅ Stack deployment completed successfully!"

      - name: Get stack outputs
        id: stack-outputs
        run: |
          OUTPUTS=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs' \
            --output json \
            --region ${{ env.AWS_REGION }})

          echo "outputs<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Extract key outputs for subsequent steps
          API_ENDPOINT=$(echo "$OUTPUTS" | jq -r '.[] | select(.OutputKey=="ApiEndpoint") | .OutputValue')
          AMPLIFY_URL=$(echo "$OUTPUTS" | jq -r '.[] | select(.OutputKey=="AmplifyAppURL") | .OutputValue')
          USER_POOL_ID=$(echo "$OUTPUTS" | jq -r '.[] | select(.OutputKey=="UserPoolId") | .OutputValue')

          echo "API_ENDPOINT=$API_ENDPOINT" >> $GITHUB_ENV
          echo "AMPLIFY_URL=$AMPLIFY_URL" >> $GITHUB_ENV
          echo "USER_POOL_ID=$USER_POOL_ID" >> $GITHUB_ENV

      - name: Create admin user
        run: |
          # Create admin user if this is a new deployment
          if [[ "${{ steps.stack-exists.outputs.exists }}" != "true" ]]; then
            echo "👤 Creating admin user..."

            aws cognito-idp admin-create-user \
              --user-pool-id ${{ env.USER_POOL_ID }} \
              --username "${{ env.ADMIN_EMAIL }}" \
              --user-attributes \
                Name=email,Value="${{ env.ADMIN_EMAIL }}" \
                Name=email_verified,Value=true \
              --temporary-password TempPass123! \
              --message-action SUPPRESS \
              --region ${{ env.AWS_REGION }}

            echo "✅ Admin user created successfully"
          else
            echo "ℹ️ Using existing admin user"
          fi

      - name: Test deployment
        run: |
          echo "🧪 Testing deployment..."

          # Test API endpoint
          if curl -f -s "${{ env.API_ENDPOINT }}/feedback" > /dev/null; then
            echo "✅ API Gateway is accessible"
          else
            echo "❌ API Gateway test failed"
            exit 1
          fi

          # Test agent health (if accessible)
          echo "ℹ️ Agent runtime health check would go here"

          echo "✅ Deployment tests passed!"

      - name: Create deployment summary
        run: |
          cat > deployment-summary.md << EOF
          # Deployment Summary

          ## Deployment Details
          - **Environment**: ${{ github.event.inputs.environment || 'prod' }}
          - **Stack Name**: ${{ env.STACK_NAME }}
          - **Region**: ${{ env.AWS_REGION }}
          - **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ## Access URLs
          - **Dashboard**: ${{ env.AMPLIFY_URL }}
          - **API Endpoint**: ${{ env.API_ENDPOINT }}

          ## Next Steps
          1. Access the dashboard at: ${{ env.AMPLIFY_URL }}
          2. Sign in with: ${{ env.ADMIN_EMAIL }} / TempPass123!
          3. Set a permanent password when prompted
          4. Test with sample feedback data

          ## Configuration
          - Admin Email: ${{ env.ADMIN_EMAIL }}
          - Bedrock Model: ${{ env.BEDROCK_MODEL_ID }}
          - CRM Integration: ${{ secrets.ENABLE_CRM || 'disabled' }}
          EOF

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md
          retention-days: 30

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Deployment Ready

              The InsightModAI Agent deployment is ready for environment: **${{ github.event.inputs.environment || 'prod' }}**

              ### Access Information
              - **Dashboard**: ${{ env.AMPLIFY_URL }}
              - **API Endpoint**: ${{ env.API_ENDPOINT }}

              ### Next Steps
              1. Review the deployment summary in artifacts
              2. Test the deployment manually
              3. Approve the PR for production deployment

              ### Configuration
              - Stack: \`${{ env.STACK_NAME }}\`
              - Region: \`${{ env.AWS_REGION }}\`
              - Model: \`${{ env.BEDROCK_MODEL_ID }}\`
            })

  # Cleanup on failure
  cleanup:
    name: Cleanup Failed Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load environment configuration for cleanup
        id: cleanup-config
        run: |
          ENV="${{ github.event.inputs.environment || 'prod' }}"

          if [ -f ".github/environments/${ENV}.yml" ]; then
            STACK_NAME=$(grep 'stack_name:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*stack_name: *//' | tr -d '"' | tr -d "'")
            AWS_REGION=$(grep 'region:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*region: *//' | tr -d '"' | tr -d "'")

            echo "STACK_NAME=$STACK_NAME" >> $GITHUB_OUTPUT
            echo "AWS_REGION_VAL=$AWS_REGION" >> $GITHUB_OUTPUT
          else
            echo "STACK_NAME=insightmodai-agent-$ENV" >> $GITHUB_OUTPUT
            echo "AWS_REGION_VAL=us-west-2" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ steps.cleanup-config.outputs.AWS_REGION_VAL }}

      - name: Delete failed stack
        run: |
          STACK_NAME="${{ steps.cleanup-config.outputs.STACK_NAME }}"
          AWS_REGION="${{ steps.cleanup-config.outputs.AWS_REGION_VAL }}"

          if aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region "$AWS_REGION" >/dev/null 2>&1; then

            echo "🗑️ Cleaning up failed deployment stack: $STACK_NAME"

            aws cloudformation delete-stack \
              --stack-name "$STACK_NAME" \
              --region "$AWS_REGION"

            aws cloudformation wait stack-delete-complete \
              --stack-name "$STACK_NAME" \
              --region "$AWS_REGION" || true

            echo "✅ Stack cleanup completed"
          else
            echo "ℹ️ No stack to cleanup"
          fi

  # Destroy stack (manual trigger only)
  destroy:
    name: Destroy Stack
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load environment configuration for destroy
        id: destroy-config
        run: |
          ENV="${{ github.event.inputs.environment }}"

          if [ -f ".github/environments/${ENV}.yml" ]; then
            STACK_NAME=$(grep 'stack_name:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*stack_name: *//' | tr -d '"' | tr -d "'")
            AWS_REGION=$(grep 'region:' ".github/environments/${ENV}.yml" | head -1 | sed 's/.*region: *//' | tr -d '"' | tr -d "'")

            echo "STACK_NAME=$STACK_NAME" >> $GITHUB_OUTPUT
            echo "AWS_REGION_VAL=$AWS_REGION" >> $GITHUB_OUTPUT
          else
            echo "STACK_NAME=insightmodai-agent-$ENV" >> $GITHUB_OUTPUT
            echo "AWS_REGION_VAL=us-west-2" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ steps.destroy-config.outputs.AWS_REGION_VAL }}

      - name: Delete CloudFormation stack
        run: |
          STACK_NAME="${{ steps.destroy-config.outputs.STACK_NAME }}"
          AWS_REGION="${{ steps.destroy-config.outputs.AWS_REGION_VAL }}"

          echo "🗑️ Destroying stack: $STACK_NAME"

          if aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region "$AWS_REGION" >/dev/null 2>&1; then

            aws cloudformation delete-stack \
              --stack-name "$STACK_NAME" \
              --region "$AWS_REGION"

            aws cloudformation wait stack-delete-complete \
              --stack-name "$STACK_NAME" \
              --region "$AWS_REGION"

            echo "✅ Stack destroyed successfully"
          else
            echo "ℹ️ Stack $STACK_NAME does not exist"
          fi

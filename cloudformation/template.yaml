AWSTemplateFormatVersion: '2010-09-09'
Description: 'InsightModAI Agent - Serverless AI agent using Amazon Bedrock AgentCore Runtime for autonomous customer insights analysis'

Parameters:
  AdminEmail:
    Type: String
    Description: Email address for the initial Cognito user (admin)
    AllowedPattern: '^[^@]+@[^@]+$'
    ConstraintDescription: Must be a valid email address

  BedrockModelId:
    Type: String
    Default: 'amazon.titan-text-premier-v1:0'
    Description: Bedrock model ID to use for the Strands agent
    AllowedValues:
      - 'amazon.titan-text-premier-v1:0'
      - 'amazon.titan-text-express-v1'
      - 'amazon.titan-text-lite-v1'
      - 'us.anthropic.claude-3-5-sonnet-20241022-v2:0'
      - 'us.anthropic.claude-3-7-sonnet-20250219-v1:0'
      - 'us.amazon.nova-pro-v1:0'

  EnvironmentName:
    Type: String
    Default: 'prod'
    Description: Environment name for resource naming
    AllowedValues:
      - 'dev'
      - 'staging'
      - 'prod'

  EnableCRM:
    Type: String
    Default: 'false'
    Description: Enable CRM integration (Salesforce/HubSpot)
    AllowedValues:
      - 'true'
      - 'false'

  EnableMockDataGenerator:
    Type: String
    Default: 'false'
    Description: Enable automatic mock data generation for testing (generates sample feedback every 5 minutes)
    AllowedValues:
      - 'true'
      - 'false'

  CognitoDomainName:
    Type: String
    Description: Unique domain name for Cognito User Pool (auto-generated)
    MinLength: 3
    MaxLength: 63
    AllowedPattern: '^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'
    ConstraintDescription: Must be lowercase alphanumeric with hyphens, 3-63 characters

  LambdaCodeBucket:
    Type: String
    Description: S3 bucket containing Lambda function code
    Default: ""

Conditions:
  EnableMockDataGen: !Equals [!Ref EnableMockDataGenerator, 'true']

Resources:
  # =============================================================================
  # STORAGE RESOURCES
  # =============================================================================

  # S3 Buckets for data storage
  FeedbackDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-feedback-data-${EnvironmentName}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30

  ProcessedInsightsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-processed-insights-${EnvironmentName}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 30

  # =============================================================================
  # DYNAMODB TABLES
  # =============================================================================

  FeedbackRecordsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-feedback-records-${EnvironmentName}'
      AttributeDefinitions:
        - AttributeName: feedback_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: customer_id
          AttributeType: S
      KeySchema:
        - AttributeName: feedback_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TimestampIndex
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: CustomerIndex
          KeySchema:
            - AttributeName: customer_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  SentimentAnalysisTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-sentiment-analysis-${EnvironmentName}'
      AttributeDefinitions:
        - AttributeName: feedback_id
          AttributeType: S
        - AttributeName: sentiment_score
          AttributeType: N
        - AttributeName: analysis_timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: feedback_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: SentimentIndex
          KeySchema:
            - AttributeName: sentiment_score
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: AnalysisTimestampIndex
          KeySchema:
            - AttributeName: analysis_timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  AgentConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-agent-config-${EnvironmentName}'
      AttributeDefinitions:
        - AttributeName: config_key
          AttributeType: S
      KeySchema:
        - AttributeName: config_key
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # =============================================================================
  # LAMBDA FUNCTIONS
  # =============================================================================

  FeedbackIngestionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-feedback-ingestion-${EnvironmentName}'
      Runtime: python3.11
      Handler: feedback_ingestion.lambda_handler
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Sub 'lambda/feedback-ingestion-${EnvironmentName}.zip'
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
          FEEDBACK_TABLE_NAME: !Sub '${AWS::StackName}-feedback-records-${EnvironmentName}'
          SENTIMENT_TABLE_NAME: !Sub '${AWS::StackName}-sentiment-analysis-${EnvironmentName}'
          CONFIG_TABLE_NAME: !Sub '${AWS::StackName}-agent-config-${EnvironmentName}'
          INSIGHTS_BUCKET_NAME: !Sub '${AWS::StackName}-processed-insights-${EnvironmentName}'
          ENVIRONMENT: !Ref EnvironmentName
      Role: !GetAtt FeedbackIngestionFunctionRole.Arn

  FeedbackIngestionFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource:
                  - !GetAtt FeedbackRecordsTable.Arn
                  - !Sub '${FeedbackRecordsTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !GetAtt AgentConfigTable.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub '${FeedbackDataBucket.Arn}/*'
        - PolicyName: InvokeAgentFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt AgentInvokerFunction.Arn

  AgentInvokerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-agent-invoker-${EnvironmentName}'
      Runtime: python3.11
      Handler: agent_invoker.lambda_handler
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Sub 'lambda/agent-invoker-${EnvironmentName}.zip'

      Timeout: 300  # 5 minutes for agent processing
      MemorySize: 512
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
          FEEDBACK_TABLE_NAME: !Sub '${AWS::StackName}-feedback-records-${EnvironmentName}'
          SENTIMENT_TABLE_NAME: !Sub '${AWS::StackName}-sentiment-analysis-${EnvironmentName}'
          CONFIG_TABLE_NAME: !Sub '${AWS::StackName}-agent-config-${EnvironmentName}'
          INSIGHTS_BUCKET_NAME: !Sub '${AWS::StackName}-processed-insights-${EnvironmentName}'
          ENVIRONMENT: !Ref EnvironmentName
          BEDROCK_MODEL_ID: !Ref BedrockModelId
      Role: !GetAtt AgentInvokerFunctionRole.Arn

  AgentInvokerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AgentCoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock-agentcore:InvokeAgentRuntime
                Resource: '*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                Resource:
                  - !GetAtt SentimentAnalysisTable.Arn
                  - !Sub '${SentimentAnalysisTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource: !GetAtt FeedbackRecordsTable.StreamArn
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/insightmodai/agent-runtime-arn-${EnvironmentName}'

  CRMIntegratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-crm-integrator-${EnvironmentName}'
      Runtime: python3.11
      Handler: crm_integrator.lambda_handler
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Sub 'lambda/crm-integrator-${EnvironmentName}.zip'

      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
          FEEDBACK_TABLE_NAME: !Sub '${AWS::StackName}-feedback-records-${EnvironmentName}'
          SENTIMENT_TABLE_NAME: !Sub '${AWS::StackName}-sentiment-analysis-${EnvironmentName}'
          CONFIG_TABLE_NAME: !Sub '${AWS::StackName}-agent-config-${EnvironmentName}'
          INSIGHTS_BUCKET_NAME: !Sub '${AWS::StackName}-processed-insights-${EnvironmentName}'
          ENVIRONMENT: !Ref EnvironmentName
      Role: !GetAtt CRMIntegratorFunctionRole.Arn

  CRMIntegratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Scan
                Resource:
                  - !GetAtt AgentConfigTable.Arn

  ConfigManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-config-manager-${EnvironmentName}'
      Runtime: python3.11
      Handler: config_manager.lambda_handler
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Sub 'lambda/config-manager-${EnvironmentName}.zip'

      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
          ENVIRONMENT: !Ref EnvironmentName
      Role: !GetAtt ConfigManagerFunctionRole.Arn

  ConfigManagerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                Resource:
                  - !GetAtt AgentConfigTable.Arn

  InsightsHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-insights-handler-${EnvironmentName}'
      Runtime: python3.11
      Handler: insights_handler.lambda_handler
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Sub 'lambda/insights-handler-${EnvironmentName}.zip'

      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
          ENVIRONMENT: !Ref EnvironmentName
      Role: !GetAtt InsightsHandlerFunctionRole.Arn

  InsightsHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !GetAtt FeedbackRecordsTable.Arn
                  - !GetAtt SentimentAnalysisTable.Arn

  AgentDeploymentFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-agent-deployment-${EnvironmentName}'
      Runtime: python3.11
      Handler: agent_deployment.lambda_handler
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Sub 'lambda/agent-deployment-${EnvironmentName}.zip'

      Timeout: 900  # 15 minutes for container operations
      MemorySize: 512
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
          FEEDBACK_TABLE_NAME: !Sub '${AWS::StackName}-feedback-records-${EnvironmentName}'
          SENTIMENT_TABLE_NAME: !Sub '${AWS::StackName}-sentiment-analysis-${EnvironmentName}'
          CONFIG_TABLE_NAME: !Sub '${AWS::StackName}-agent-config-${EnvironmentName}'
          INSIGHTS_BUCKET_NAME: !Sub '${AWS::StackName}-processed-insights-${EnvironmentName}'
          ENVIRONMENT: !Ref EnvironmentName
          AGENTCORE_EXECUTION_ROLE_ARN: !GetAtt AgentCoreRuntimeRole.Arn
      Role: !GetAtt AgentDeploymentFunctionRole.Arn

  AgentDeploymentFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AgentCoreControlAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock-agentcore:CreateAgentRuntime
                  - bedrock-agentcore:DeleteAgentRuntime
                Resource: '*'
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/insightmodai-agent-${EnvironmentName}'
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/insightmodai/agent-runtime-arn-${EnvironmentName}'

  MockDataGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-mock-data-generator-${EnvironmentName}'
      Runtime: python3.11
      Handler: mock_data_generator.lambda_handler
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Sub 'lambda/mock-data-generator-${EnvironmentName}.zip'
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
          ENVIRONMENT: !Ref EnvironmentName
      Role: !GetAtt MockDataGeneratorFunctionRole.Arn

  MockDataGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt FeedbackRecordsTable.Arn

  MockDataGeneratorSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${AWS::StackName}-mock-data-schedule-${EnvironmentName}'
      Description: 'Trigger mock data generation every 5 minutes'
      ScheduleExpression: 'rate(5 minutes)'
      State: !If [EnableMockDataGen, ENABLED, DISABLED]
      Targets:
        - Arn: !GetAtt MockDataGeneratorFunction.Arn
          Id: MockDataGeneratorTarget

  MockDataGeneratorSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MockDataGeneratorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MockDataGeneratorSchedule.Arn

  # DynamoDB Stream to Lambda Event Source Mapping
  FeedbackStreamEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt FeedbackRecordsTable.StreamArn
      FunctionName: !Ref AgentInvokerFunction
      StartingPosition: LATEST
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5
      MaximumRecordAgeInSeconds: 604800  # 7 days
      MaximumRetryAttempts: 3
      BisectBatchOnFunctionError: true
      Enabled: true

  # =============================================================================
  # ECR REPOSITORY FOR AGENT CONTAINER
  # =============================================================================

  AgentECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'insightmodai-agent-${EnvironmentName}'
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }


  # =============================================================================
  # API GATEWAY
  # =============================================================================

  InsightModAIApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-api-${EnvironmentName}'
      Description: 'API Gateway for InsightModAI Agent'
      EndpointConfiguration:
        Types:
          - REGIONAL

  FeedbackResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref InsightModAIApi
      ParentId: !GetAtt InsightModAIApi.RootResourceId
      PathPart: 'feedback'

  FeedbackPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref InsightModAIApi
      ResourceId: !Ref FeedbackResource
      HttpMethod: POST
      AuthorizationType: NONE  # Public endpoint for feedback submission
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 400
        - StatusCode: 500
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FeedbackIngestionFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                  "feedback_id": "$inputRoot.feedback_id",
                  "status": "processed"
                }
          - StatusCode: 400
          - StatusCode: 500

  InsightsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref InsightModAIApi
      ParentId: !GetAtt InsightModAIApi.RootResourceId
      PathPart: 'insights'

  InsightsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref InsightModAIApi
      ResourceId: !Ref InsightsResource
      HttpMethod: GET
      AuthorizationType: AWS_IAM  # Requires signed requests
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 500
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InsightsHandlerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  AgentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref InsightModAIApi
      ParentId: !GetAtt InsightModAIApi.RootResourceId
      PathPart: 'agent'

  AgentPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref InsightModAIApi
      ResourceId: !Ref AgentResource
      HttpMethod: POST
      AuthorizationType: AWS_IAM  # Requires signed requests
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 500
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentInvokerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  ConfigResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref InsightModAIApi
      ParentId: !GetAtt InsightModAIApi.RootResourceId
      PathPart: 'config'

  ConfigGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref InsightModAIApi
      ResourceId: !Ref ConfigResource
      HttpMethod: GET
      AuthorizationType: AWS_IAM  # Requires signed requests
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 500
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfigManagerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  ConfigPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref InsightModAIApi
      ResourceId: !Ref ConfigResource
      HttpMethod: PUT
      AuthorizationType: AWS_IAM  # Requires signed requests
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 500
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfigManagerFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: 400
          - StatusCode: 401
          - StatusCode: 403
          - StatusCode: 500

  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref InsightModAIApi
      ResourceId: !GetAtt InsightModAIApi.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: |
                {
                  "message": "InsightModAI Agent API",
                  "version": "1.0",
                  "endpoints": {
                    "POST /feedback": "Submit customer feedback",
                    "GET /insights": "Retrieve processed insights (requires authentication)",
                    "POST /agent": "Invoke AI agent (requires authentication)",
                    "GET /config": "Get configuration (requires authentication)",
                    "PUT /config": "Update configuration (requires authentication)"
                  }
                }

  # CORS Support
  OptionsFeedbackMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref InsightModAIApi
      ResourceId: !Ref FeedbackResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  OptionsInsightsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref InsightModAIApi
      ResourceId: !Ref InsightsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  OptionsAgentMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref InsightModAIApi
      ResourceId: !Ref AgentResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  OptionsConfigMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref InsightModAIApi
      ResourceId: !Ref ConfigResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"


  # Lambda Permissions for API Gateway
  FeedbackIngestionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FeedbackIngestionFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${InsightModAIApi}/*'

  InsightsHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InsightsHandlerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${InsightModAIApi}/*'

  AgentInvokerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentInvokerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${InsightModAIApi}/*'

  ConfigManagerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ConfigManagerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${InsightModAIApi}/*'

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - FeedbackPostMethod
      - InsightsGetMethod
      - AgentPostMethod
      - ConfigGetMethod
      - ConfigPutMethod
      - ApiGatewayRootMethod
      - OptionsFeedbackMethod
      - OptionsInsightsMethod
      - OptionsAgentMethod
      - OptionsConfigMethod
      - FeedbackIngestionPermission
      - InsightsHandlerPermission
      - AgentInvokerPermission
      - ConfigManagerPermission
    Properties:
      RestApiId: !Ref InsightModAIApi
      StageName: !Ref EnvironmentName
      Description: !Sub 'Stage for ${EnvironmentName} environment'

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # =============================================================================
  # COGNITO AUTHENTICATION
  # =============================================================================

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-users-${EnvironmentName}'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomainName
      UserPoolId: !Ref UserPool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub '${AWS::StackName}-client-${EnvironmentName}'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub '${AWS::StackName}-identity-${EnvironmentName}'
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # =============================================================================
  # AWS AMPLIFY FOR REACT DASHBOARD
  # =============================================================================

  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: !Sub '${AWS::StackName}-dashboard-${EnvironmentName}'
      Description: !Sub 'InsightModAI Frontend - ${EnvironmentName}'
      Platform: WEB
      EnvironmentVariables:
        - Name: REACT_APP_API_ENDPOINT
          Value: !Sub 'https://${InsightModAIApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}'
        - Name: REACT_APP_USER_POOL_ID
          Value: !Ref UserPool
        - Name: REACT_APP_USER_POOL_CLIENT_ID
          Value: !Ref UserPoolClient
        - Name: REACT_APP_IDENTITY_POOL_ID
          Value: !Ref IdentityPool
        - Name: REACT_APP_REGION
          Value: !Ref AWS::Region
      CustomRules:
        - Source: '</^[^.]+$|\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|woff2|ttf|map|json|webp)$)([^.]+$)/>'
          Target: '/index.html'
          Status: '200'
      IAMServiceRole: !GetAtt AmplifyRole.Arn

  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-amplify-role-${EnvironmentName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess-Amplify

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: main
      EnableAutoBuild: false
      Framework: React
      EnvironmentVariables:
        - Name: REACT_APP_API_ENDPOINT
          Value: !Sub 'https://${InsightModAIApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}'
        - Name: REACT_APP_USER_POOL_ID
          Value: !Ref UserPool
        - Name: REACT_APP_USER_POOL_CLIENT_ID
          Value: !Ref UserPoolClient
        - Name: REACT_APP_IDENTITY_POOL_ID
          Value: !Ref IdentityPool
        - Name: REACT_APP_REGION
          Value: !Ref AWS::Region

  # =============================================================================
  # CLOUDWATCH MONITORING
  # =============================================================================

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-feedback-ingestion-${EnvironmentName}'
      RetentionInDays: 30

  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${AWS::StackName}-dashboard-${EnvironmentName}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "log",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${CloudWatchLogGroup}' | fields @timestamp, @message | sort @timestamp desc | limit 100",
                "region": "${AWS::Region}",
                "title": "Feedback Ingestion Logs"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${FeedbackIngestionFunction}"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Invocations",
                "period": 300
              }
            }
          ]
        }

  NegativeSentimentAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-negative-sentiment-${EnvironmentName}'
      AlarmDescription: 'Alarm when average sentiment score drops below 0.3 for 2 consecutive periods'
      MetricName: SentimentScore
      Namespace: InsightModAI
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0.3
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching
      ActionsEnabled: true

  HighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-high-latency-${EnvironmentName}'
      AlarmDescription: 'Alarm when Lambda duration exceeds 10 seconds'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref FeedbackIngestionFunction

  # =============================================================================
  # IAM ROLES
  # =============================================================================

  AgentCoreRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-agentcore-runtime-${EnvironmentName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock-agentcore.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # =============================================================================
  # SSM PARAMETERS FOR CONFIGURATION
  # =============================================================================

  AutoProcessFeedbackParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/insightmodai/auto-process-feedback-${EnvironmentName}'
      Type: String
      Value: 'true'
      Description: 'Enable automatic processing of feedback with AgentCore agent'

  CRMEnabledParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/insightmodai/crm-enabled-${EnvironmentName}'
      Type: String
      Value: !Ref EnableCRM
      Description: 'Enable CRM integration'

  # =============================================================================
  # OUTPUTS
  # =============================================================================

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${InsightModAIApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}'
    Export:
      Name: !Sub '${AWS::StackName}-api-endpoint-${EnvironmentName}'

  AmplifyAppId:
    Description: 'Amplify App ID'
    Value: !Ref AmplifyApp
    Export:
      Name: !Sub '${AWS::StackName}-amplify-app-id-${EnvironmentName}'

  AmplifyAppURL:
    Description: 'Amplify dashboard URL'
    Value: !Sub 'https://${AmplifyBranch.BranchName}.${AmplifyApp.AppId}.amplifyapp.com'
    Export:
      Name: !Sub '${AWS::StackName}-amplify-url-${EnvironmentName}'

  FeedbackBucketName:
    Description: 'S3 bucket for feedback data'
    Value: !Ref FeedbackDataBucket
    Export:
      Name: !Sub '${AWS::StackName}-feedback-bucket-${EnvironmentName}'

  UserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-user-pool-id-${EnvironmentName}'

  UserPoolClientId:
    Description: 'Cognito User Pool Client ID'
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-user-pool-client-id-${EnvironmentName}'

  CognitoDomain:
    Description: 'Cognito User Pool Domain for authentication'
    Value: !Sub 'https://${CognitoDomainName}.auth.${AWS::Region}.amazoncognito.com'
    Export:
      Name: !Sub '${AWS::StackName}-cognito-domain-${EnvironmentName}'

  ECRRepositoryUri:
    Description: 'ECR repository URI for agent container'
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/insightmodai-agent-${EnvironmentName}'
    Export:
      Name: !Sub '${AWS::StackName}-ecr-uri-${EnvironmentName}'
